/**
 * Verify Quantum Agent System Results
 * Shows what was generated by the system
 */
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function verifyResults() {
  console.log('🔍 Verifying Quantum Agent System Results\n');
  console.log('='.repeat(60));
  
  // 1. Check processed posts
  console.log('\n📝 1. Processed Posts:');
  const { data: posts } = await supabase
    .from('social_posts')
    .select('id, caption, platform, created_at, processed_by_agents')
    .eq('processed_by_agents', true)
    .order('created_at', { ascending: false })
    .limit(5);
  
  if (posts && posts.length > 0) {
    console.log(`   ✅ ${posts.length} posts processed`);
    posts.forEach((post, i) => {
      console.log(`\n   ${i + 1}. ${post.id}`);
      console.log(`      Caption: ${post.caption?.substring(0, 50)}...`);
      console.log(`      Platform: ${post.platform}`);
      console.log(`      Processed: ✅`);
    });
  } else {
    console.log('   ⚠️  No processed posts yet');
  }
  
  // 2. Check generated content
  console.log('\n✍️  2. Generated Content:');
  const { data: copy } = await supabase
    .from('copy_generator')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(3);
  
  if (copy && copy.length > 0) {
    console.log(`   ✅ ${copy.length} pieces of content generated`);
    copy.forEach((c, i) => {
      console.log(`\n   ${i + 1}. ID: ${c.id}`);
      console.log(`      Hook: ${c.hook?.substring(0, 60)}...`);
      console.log(`      Caption: ${c.caption?.substring(0, 60)}...`);
      console.log(`      CTA: ${c.cta?.substring(0, 60)}...`);
      if (c.belief_alignment_tag) {
        console.log(`      Alignment: ${c.belief_alignment_tag.substring(0, 60)}...`);
      }
      console.log(`      Created: ${c.created_at}`);
    });
  } else {
    console.log('   ⚠️  No generated content yet');
  }
  
  // 3. Check generated assets
  console.log('\n🎨 3. Generated Assets:');
  const { data: assets } = await supabase
    .from('creative_assets')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(3);
  
  if (assets && assets.length > 0) {
    console.log(`   ✅ ${assets.length} assets generated`);
    assets.forEach((asset, i) => {
      console.log(`\n   ${i + 1}. ID: ${asset.asset_id || asset.id}`);
      console.log(`      Type: ${asset.creative_type}`);
      if (asset.media_url) {
        console.log(`      Image: ${asset.media_url.substring(0, 80)}...`);
        console.log(`      🔗 Open: ${asset.media_url}`);
      }
      if (asset.generation_prompt) {
        console.log(`      Prompt: ${asset.generation_prompt.substring(0, 60)}...`);
      }
      console.log(`      Created: ${asset.created_at}`);
    });
  } else {
    console.log('   ⚠️  No generated assets yet');
  }
  
  // 4. Check processing stats
  console.log('\n📊 4. Processing Stats:');
  const { count: total } = await supabase
    .from('social_posts')
    .select('*', { count: 'exact', head: true });
  
  const { count: processed } = await supabase
    .from('social_posts')
    .select('*', { count: 'exact', head: true })
    .eq('processed_by_agents', true);
  
  console.log(`   Total posts: ${total || 0}`);
  console.log(`   Processed: ${processed || 0}`);
  console.log(`   Pending: ${(total || 0) - (processed || 0)}`);
  
  // 5. Summary
  console.log('\n' + '='.repeat(60));
  console.log('✅ Verification Complete!\n');
  
  if (posts && posts.length > 0 && copy && copy.length > 0 && assets && assets.length > 0) {
    console.log('🎉 System is fully operational!');
    console.log('   ✓ Posts are being processed');
    console.log('   ✓ Content is being generated');
    console.log('   ✓ Assets are being created');
    console.log('\n💡 Next: Start background scheduler with:');
    console.log('   ./integration/start-quantum-service.sh');
  } else {
    console.log('⚠️  Some components not running yet');
    console.log('   Check the logs above for details');
  }
}

verifyResults().catch(console.error);
